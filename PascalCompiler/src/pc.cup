
import java.util.*;
import Semantic.BaseType;
import Tree.Expression.DataType.*;
import Tree.Expression.LiteralNodes.LiteralChar;
import Tree.Expression.LiteralNodes.LiteralString;
import Tree.Expression.LiteralNodes.NumberNode;
import Tree.Sentences.Bucles.ForNode;
import Tree.Sentences.Conditional.BlockNode;
import Tree.Sentences.Conditional.IfNode;
import Tree.Sentences.Declaration.ConstNode;
import Tree.Sentences.Declaration.DeclarationNode;
import java_cup.runtime.*;
import java.util.*;
import Tree.Expression.*;
import Tree.BinaryOperator.*;
import Tree.Sentences.Bucles.WhileNode;
import Tree.Sentences.Declaration.AssignationNode;
import Tree.Expression.BaseType.ExpressionNode;
parser code {:
    

   



    public HashMap<String,Integer> vars = new HashMap<String,Integer>();
:};   
terminal           SEMI, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, EQUALS, PRINT, IF, LCURLY, RCURLY, ELSE, WHILE, LBRACK, RBRACK, OF, SCANF;
terminal            TO,FLOAT,CHAR,BOOLEAN,STRING, ARRAY,INTEGER, ASSIGMENT,CONST;
terminal Integer   NUMBER;
terminal String   ID,LIT_STRING;
terminal char LIT_CHAR;
terminal GREATERTHAN, LESSTHAN, LESSOREQUALTHAN, GREATEROREQUALTHAN, EQUALSEQUALS, NOTEQUALS,DOT;

terminal VAR,FOR, PROGRAM,THEN,BEGIN,END,DO;//Reserverd Words

terminal COLON,COMMA;//Special Quotes

non terminal Object declaration_list;
non terminal BaseType type;

non terminal List<SentencesNode>    program, statement_list, BeginProgram, LoopBucle, SpecialSentences;
non terminal SentencesNode statement,  SentencesDeclaration, ConstDeclaration, Assigment,SentencesIf, SentencesBucle, SentencesWhile;
non terminal ExpressionNode    expr, factor, term, sumfactor,TypeOfConst;
non terminal IdNode id;
non terminal BlockNode Block,SentencesElse;
non terminal List<String> ListId, OptionalList;


 //falta arreglos



    program ::= BeginProgram statement_list:sl {:RESULT = sl;  :}
    ;

    BeginProgram ::= PROGRAM ID SEMI
    |
    ;




   statement_list ::= statement_list:slist statement:st {:  slist.add(st); RESULT = slist; :}
                 | {: List<SentencesNode> nodeList = new ArrayList<SentencesNode>(); RESULT = nodeList; :}
                  ;
   statement ::= //PRINT expr:e SEMI {:  RESULT = new PrintNode(e); :}
                 // SCANF expr:e SEMI {: RESULT = new ScanNode(e); :}
                  id:i ASSIGMENT expr:e SEMI {: RESULT = new AssignationNode(i, e);:} //Aisgnacion nombre := "rafael"
                  |
                   SentencesDeclaration:st{:RESULT= st; :}
                    |
                   ConstDeclaration:st {:RESULT = st;:}
                  |
                    SentencesIf:st {:RESULT = st;:}

                 |
                 SentencesWhile:wd {:RESULT = wd;:}  |

                 FunctionDeclaration:fd {::}

                 //WHILE LPAREN expr:e RPAREN LCURLY statement_list:s RCURLY {: RESULT = new WhileNode(); :}
                 |
                 FOR LPAREN id:i EQUALS expr:e TO expr:e2 RPAREN LCURLY statement_list:s RCURLY {: RESULT = new ForNode(i,e,null,null); :}
                 ;

SentencesIf::= IF  expr:exp  THEN Block:block  {: IfNode node = new IfNode(exp,block); RESULT = node; :};

SentencesWhile ::= WHILE expr:exp DO LoopBucle:loopbucle {:WhileNode node = new WhileNode(exp, loopbucle); RESULT = node; :};

LoopBucle::=         SentencesBucle:sentencesBucle {:List<SentencesNode> list = new ArrayList<SentencesNode>(); list.add(sentencesBucle); RESULT = list;:}
                     |
                     BEGIN  SpecialSentences:specialsentences END SEMI {:RESULT = specialsentences;:};

SentencesBucle ::=  SentencesDeclaration:sentencesdeclaration {:RESULT = sentencesdeclaration;:}
                    |
                    SentencesIf:sentencesif {:RESULT = sentencesif;:}
                    |
                    SentencesWhile:sentenceswhile {:RESULT = sentenceswhile;:};

                    /*SentencesFor:sentencesfor {:RESULT = sentencesfor;:};
                    |
                    SentencesRepeat
                    |
                    SentencesComment
                    |
                    CallFunctionOrAssignment SEMI;*/

SpecialSentences ::= SpecialSentences:specialSentences  SentencesBucle:sentenceBucle{:specialSentences.add(sentenceBucle); RESULT = specialSentences; :}
                     | {:List<SentencesNode>  nodelist = new ArrayList<SentencesNode>(); RESULT = nodelist;:};


 Block::= statement:s {: BlockNode node = new BlockNode(s); RESULT = node;:}
          |
          BEGIN statement_list:tc END SEMI SentencesElse:fc {: BlockNode node = new BlockNode(tc,fc); RESULT = node;:};


 SentencesElse ::= ELSE  Block:bc {:  RESULT = bc;:}
                   |
                   {:BlockNode node = new  BlockNode(); RESULT = node; :};


SentencesDeclaration ::=   VAR ListId:ls COLON type:typ SEMI {:DeclarationNode declaration = new DeclarationNode(ls,typ); RESULT = declaration;:};

ConstDeclaration ::= CONST ID:id ASSIGMENT TypeOfConst:tc SEMI  {: ConstNode node = new ConstNode(id,tc); RESULT= node;:} ;

TypeOfConst ::= LIT_CHAR:ltc {:LiteralChar nodo = new LiteralChar(ltc); RESULT = nodo;:}
                |
                LIT_STRING:lts {:LiteralString nodo = new LiteralString(lts);RESULT = nodo;:};

   OptionalList ::= COMMA ListId:ls {: RESULT = ls;:}
                 |{:ArrayList<String> ls = new ArrayList<String>();RESULT= ls; :};

    ListId ::= ID:id OptionalList:ls {:ls.add(id); RESULT= ls;:}
                    |;

   expr      ::= expr:e GREATERTHAN sumfactor:f {: RESULT = new GreaterThanNode(f,e); :}
                | expr:e LESSTHAN sumfactor:f {: RESULT = new LessThanNode(f,e); :}
                | expr:e GREATEROREQUALTHAN sumfactor:f {: RESULT = new GreatherOrEqualThanNode (f,e); :}
                | expr:e LESSOREQUALTHAN sumfactor:f {: RESULT = new LessOrEqualThanNode(f,e); :}
                | expr:e EQUALSEQUALS sumfactor:f {: RESULT = new EqualsNode(f,e); :}
                | expr:e NOTEQUALS sumfactor:f {: RESULT = new NotEqualsNode(f,e); :}
                | sumfactor:f {: RESULT = f; :}
                ;

   sumfactor ::= sumfactor:e PLUS factor:f
                 {: RESULT = new SumNode(f,e); :}
                 |sumfactor:e MINUS factor:f
                 {: RESULT = new SubNode(f,e); :}
                 |
                 factor:f
                 {: RESULT = f; :}
                 ;
   factor    ::= factor:f TIMES term:t
                 {: RESULT = new MultNode(t,f); :}
                 |
                 factor:f DIVIDE term:t
                 {: RESULT = new DivNode(t,f); :}
                 |
                 term:t
                 {: RESULT = t; :}
                 ;

   term      ::= LPAREN expr:e RPAREN
                 {: RESULT = e; :}
                 |
                 NUMBER:n
                 {: RESULT = new NumberNode(n); :}
                 |
                 id:i
                 {: RESULT = i; :}
                 ;

   id        ::= ID:id {:RESULT = new IdNode(id);:};



  type ::=
             CHAR {: CharNode node = new CharNode(); RESULT = node;:}
            | BOOLEAN  {: BooleanType node = new BooleanType(); RESULT= node;:}
            | STRING {: StringNode node= new StringNode();
                 RESULT= node;:}|
                  INTEGER {: IntNode node =  new IntNode(); RESULT = node; :};