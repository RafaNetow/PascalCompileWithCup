
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.*;
import Semantic.BaseType;
import Tree.Expression.DataType.*;
import Tree.Expression.LiteralNodes.LiteralChar;
import Tree.Expression.LiteralNodes.LiteralString;
import Tree.Expression.LiteralNodes.NumberNode;
import Tree.Sentences.Bucles.ForNode;
import Tree.Sentences.Conditional.BlockNode;
import Tree.Sentences.Conditional.IfNode;
import Tree.Sentences.Declaration.ConstNode;
import Tree.Sentences.Declaration.DeclarationNode;
import Tree.Sentences.Declaration.Function.*;
import java_cup.runtime.*;
import java.util.*;
import Tree.Expression.*;
import Tree.BinaryOperator.*;
import Tree.Sentences.Bucles.WhileNode;
import Tree.Sentences.Declaration.AssignationNode;
import Tree.Expression.BaseType.ExpressionNode;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\004\004\000\002\002\004\000\002\006" +
    "\005\000\002\006\002\000\002\005\004\000\002\005\002" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\023\007\000\002\022\006\000\002\022" +
    "\007\000\002\024\004\000\002\025\004\000\002\025\002" +
    "\000\002\020\012\000\002\044\002\000\002\040\006\000" +
    "\002\041\007\000\002\041\006\000\002\041\002\000\002" +
    "\042\004\000\002\042\002\000\002\015\006\000\002\017" +
    "\006\000\002\007\003\000\002\007\006\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\010\004\000" +
    "\002\010\002\000\002\034\003\000\002\034\007\000\002" +
    "\035\004\000\002\035\002\000\002\012\007\000\002\013" +
    "\007\000\002\032\003\000\002\032\003\000\002\037\004" +
    "\000\002\037\002\000\002\036\004\000\002\036\002\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\003\000\002\031\005\000\002\031\005\000\002\031\003" +
    "\000\002\027\005\000\002\027\005\000\002\027\003\000" +
    "\002\030\005\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\033\003\000\002\033" +
    "\006\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\024\002\ufffe\015\ufffe\021\ufffe\036\ufffe\042" +
    "\ufffe\054\ufffe\056\006\063\ufffe\064\ufffe\001\002\000\004" +
    "\002\211\001\002\000\022\002\ufffc\015\ufffc\021\ufffc\036" +
    "\ufffc\042\ufffc\054\ufffc\063\ufffc\064\ufffc\001\002\000\004" +
    "\042\007\001\002\000\004\004\010\001\002\000\022\002" +
    "\uffff\015\uffff\021\uffff\036\uffff\042\uffff\054\uffff\063\uffff" +
    "\064\uffff\001\002\000\022\002\001\015\020\021\012\036" +
    "\030\042\022\054\017\063\027\064\015\001\002\000\014" +
    "\011\121\041\111\042\115\043\117\044\114\001\002\000" +
    "\024\002\ufff7\015\ufff7\021\ufff7\036\ufff7\042\ufff7\054\ufff7" +
    "\061\ufff7\063\ufff7\064\ufff7\001\002\000\024\002\ufff8\015" +
    "\ufff8\021\ufff8\036\ufff8\042\ufff8\054\ufff8\061\ufff8\063\ufff8" +
    "\064\ufff8\001\002\000\004\042\202\001\002\000\024\002" +
    "\ufffa\015\ufffa\021\ufffa\036\ufffa\042\ufffa\054\ufffa\061\ufffa" +
    "\063\ufffa\064\ufffa\001\002\000\006\042\043\065\uffd2\001" +
    "\002\000\014\011\121\041\111\042\115\043\117\044\114" +
    "\001\002\000\024\002\ufffd\015\ufffd\021\ufffd\036\ufffd\042" +
    "\ufffd\054\ufffd\061\ufffd\063\ufffd\064\ufffd\001\002\000\006" +
    "\011\106\035\107\001\002\000\024\002\ufff5\015\ufff5\021" +
    "\ufff5\036\ufff5\042\ufff5\054\ufff5\061\ufff5\063\ufff5\064\ufff5" +
    "\001\002\000\024\002\ufff9\015\ufff9\021\ufff9\036\ufff9\042" +
    "\ufff9\054\ufff9\061\ufff9\063\ufff9\064\ufff9\001\002\000\024" +
    "\002\ufffb\015\ufffb\021\ufffb\036\ufffb\042\ufffb\054\ufffb\061" +
    "\ufffb\063\ufffb\064\ufffb\001\002\000\024\002\ufff6\015\ufff6" +
    "\021\ufff6\036\ufff6\042\ufff6\054\ufff6\061\ufff6\063\ufff6\064" +
    "\ufff6\001\002\000\004\042\037\001\002\000\004\042\031" +
    "\001\002\000\004\035\032\001\002\000\006\043\035\044" +
    "\033\001\002\000\004\004\uffd7\001\002\000\004\004\036" +
    "\001\002\000\004\004\uffd6\001\002\000\024\002\uffd8\015" +
    "\uffd8\021\uffd8\036\uffd8\042\uffd8\054\uffd8\061\uffd8\063\uffd8" +
    "\064\uffd8\001\002\000\004\011\041\001\002\000\004\065" +
    "\070\001\002\000\012\012\uffe9\042\043\054\042\065\uffd2" +
    "\001\002\000\006\042\043\065\uffd2\001\002\000\006\065" +
    "\uffd4\066\061\001\002\000\004\065\050\001\002\000\004" +
    "\012\uffed\001\002\000\004\012\047\001\002\000\006\004" +
    "\uffec\065\uffec\001\002\000\012\030\055\031\054\032\052" +
    "\034\051\001\002\000\006\004\uffba\012\uffba\001\002\000" +
    "\006\004\uffbb\012\uffbb\001\002\000\006\004\057\012\uffe7" +
    "\001\002\000\006\004\uffbc\012\uffbc\001\002\000\006\004" +
    "\uffbd\012\uffbd\001\002\000\004\012\uffea\001\002\000\012" +
    "\012\uffe9\042\043\054\042\065\uffd2\001\002\000\004\012" +
    "\uffe8\001\002\000\006\042\043\065\uffd2\001\002\000\004" +
    "\065\uffd3\001\002\000\004\065\uffd5\001\002\000\004\065" +
    "\065\001\002\000\012\030\055\031\054\032\052\034\051" +
    "\001\002\000\006\004\057\012\uffe7\001\002\000\004\012" +
    "\uffeb\001\002\000\012\030\055\031\054\032\052\034\051" +
    "\001\002\000\004\004\072\001\002\000\004\054\017\001" +
    "\002\000\012\015\020\021\012\054\017\060\101\001\002" +
    "\000\024\002\uffe0\015\uffe0\021\uffe0\036\uffe0\042\uffe0\054" +
    "\uffe0\061\uffe0\063\uffe0\064\uffe0\001\002\000\024\002\uffe4" +
    "\015\uffe4\021\uffe4\036\uffe4\042\uffe4\054\uffe4\061\uffe4\063" +
    "\uffe4\064\uffe4\001\002\000\024\002\uffe1\015\uffe1\021\uffe1" +
    "\036\uffe1\042\uffe1\054\uffe1\061\uffe1\063\uffe1\064\uffe1\001" +
    "\002\000\024\002\uffe2\015\uffe2\021\uffe2\036\uffe2\042\uffe2" +
    "\054\uffe2\061\uffe2\063\uffe2\064\uffe2\001\002\000\024\002" +
    "\uffee\015\uffee\021\uffee\036\uffee\042\uffee\054\uffee\061\uffee" +
    "\063\uffee\064\uffee\001\002\000\012\015\uffde\021\uffde\054" +
    "\uffde\061\uffde\001\002\000\012\015\020\021\012\054\017" +
    "\061\104\001\002\000\012\015\uffdf\021\uffdf\054\uffdf\061" +
    "\uffdf\001\002\000\004\004\105\001\002\000\024\002\uffe3" +
    "\015\uffe3\021\uffe3\036\uffe3\042\uffe3\054\uffe3\061\uffe3\063" +
    "\uffe3\064\uffe3\001\002\000\014\011\121\041\111\042\115" +
    "\043\117\044\114\001\002\000\014\011\121\041\111\042" +
    "\115\043\117\044\114\001\002\000\040\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\012\uffc2\045\uffc2\046\uffc2\047" +
    "\uffc2\050\uffc2\051\uffc2\052\uffc2\057\uffc2\062\uffc2\066\uffc2" +
    "\001\002\000\040\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\012\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\057\uffc3\062\uffc3\066\uffc3\001\002\000\040\004" +
    "\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\012\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\057\uffc5\062" +
    "\uffc5\066\uffc5\001\002\000\034\004\uffcb\005\133\006\134" +
    "\012\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052" +
    "\uffcb\057\uffcb\062\uffcb\066\uffcb\001\002\000\040\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\010\uffc0\012\uffc0\045\uffc0\046" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\057\uffc0\062\uffc0" +
    "\066\uffc0\001\002\000\042\004\uffbf\005\uffbf\006\uffbf\007" +
    "\uffbf\010\uffbf\011\151\012\uffbf\045\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\051\uffbf\052\uffbf\057\uffbf\062\uffbf\066\uffbf\001" +
    "\002\000\040\004\uffc8\005\uffc8\006\uffc8\007\137\010\136" +
    "\012\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052" +
    "\uffc8\057\uffc8\062\uffc8\066\uffc8\001\002\000\040\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\010\uffc1\012\uffc1\045\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\057\uffc1\062\uffc1" +
    "\066\uffc1\001\002\000\020\004\150\045\130\046\125\047" +
    "\131\050\127\051\126\052\124\001\002\000\014\011\121" +
    "\041\111\042\115\043\117\044\114\001\002\000\020\012" +
    "\123\045\130\046\125\047\131\050\127\051\126\052\124" +
    "\001\002\000\040\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010" +
    "\uffc4\012\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4" +
    "\052\uffc4\057\uffc4\062\uffc4\066\uffc4\001\002\000\014\011" +
    "\121\041\111\042\115\043\117\044\114\001\002\000\014" +
    "\011\121\041\111\042\115\043\117\044\114\001\002\000" +
    "\014\011\121\041\111\042\115\043\117\044\114\001\002" +
    "\000\014\011\121\041\111\042\115\043\117\044\114\001" +
    "\002\000\014\011\121\041\111\042\115\043\117\044\114" +
    "\001\002\000\014\011\121\041\111\042\115\043\117\044" +
    "\114\001\002\000\034\004\uffce\005\133\006\134\012\uffce" +
    "\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\057" +
    "\uffce\062\uffce\066\uffce\001\002\000\014\011\121\041\111" +
    "\042\115\043\117\044\114\001\002\000\014\011\121\041" +
    "\111\042\115\043\117\044\114\001\002\000\040\004\uffc9" +
    "\005\uffc9\006\uffc9\007\137\010\136\012\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\057\uffc9\062\uffc9" +
    "\066\uffc9\001\002\000\014\011\121\041\111\042\115\043" +
    "\117\044\114\001\002\000\014\011\121\041\111\042\115" +
    "\043\117\044\114\001\002\000\040\004\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\010\uffc7\012\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\052\uffc7\057\uffc7\062\uffc7\066\uffc7\001" +
    "\002\000\040\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\012\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\057\uffc6\062\uffc6\066\uffc6\001\002\000\040\004\uffca" +
    "\005\uffca\006\uffca\007\137\010\136\012\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\051\uffca\052\uffca\057\uffca\062\uffca" +
    "\066\uffca\001\002\000\034\004\uffd1\005\133\006\134\012" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1" +
    "\057\uffd1\062\uffd1\066\uffd1\001\002\000\034\004\uffcf\005" +
    "\133\006\134\012\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\057\uffcf\062\uffcf\066\uffcf\001\002\000" +
    "\034\004\uffcd\005\133\006\134\012\uffcd\045\uffcd\046\uffcd" +
    "\047\uffcd\050\uffcd\051\uffcd\052\uffcd\057\uffcd\062\uffcd\066" +
    "\uffcd\001\002\000\034\004\uffd0\005\133\006\134\012\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\057" +
    "\uffd0\062\uffd0\066\uffd0\001\002\000\034\004\uffcc\005\133" +
    "\006\134\012\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051" +
    "\uffcc\052\uffcc\057\uffcc\062\uffcc\066\uffcc\001\002\000\024" +
    "\002\ufff3\015\ufff3\021\ufff3\036\ufff3\042\ufff3\054\ufff3\061" +
    "\ufff3\063\ufff3\064\ufff3\001\002\000\014\011\121\041\111" +
    "\042\115\043\117\044\114\001\002\000\004\012\157\001" +
    "\002\000\022\012\uffef\045\130\046\125\047\131\050\127" +
    "\051\126\052\124\066\155\001\002\000\004\012\ufff1\001" +
    "\002\000\014\011\121\041\111\042\115\043\117\044\114" +
    "\001\002\000\004\012\ufff0\001\002\000\040\004\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\012\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\051\uffbe\052\uffbe\057\uffbe\062\uffbe\066" +
    "\uffbe\001\002\000\004\012\161\001\002\000\004\004\162" +
    "\001\002\000\024\002\ufff2\015\ufff2\021\ufff2\036\ufff2\042" +
    "\ufff2\054\ufff2\061\ufff2\063\ufff2\064\ufff2\001\002\000\020" +
    "\045\130\046\125\047\131\050\127\051\126\052\124\057" +
    "\164\001\002\000\022\015\020\021\012\036\030\042\022" +
    "\054\017\060\167\063\027\064\015\001\002\000\024\002" +
    "\uffe6\015\uffe6\021\uffe6\036\uffe6\042\uffe6\054\uffe6\061\uffe6" +
    "\063\uffe6\064\uffe6\001\002\000\024\002\uffdd\015\uffdd\021" +
    "\uffdd\036\uffdd\042\uffdd\054\uffdd\061\uffdd\063\uffdd\064\uffdd" +
    "\001\002\000\022\015\ufffc\021\ufffc\036\ufffc\042\ufffc\054" +
    "\ufffc\061\ufffc\063\ufffc\064\ufffc\001\002\000\022\015\020" +
    "\021\012\036\030\042\022\054\017\061\171\063\027\064" +
    "\015\001\002\000\004\004\172\001\002\000\026\002\uffda" +
    "\015\uffda\020\174\021\uffda\036\uffda\042\uffda\054\uffda\061" +
    "\uffda\063\uffda\064\uffda\001\002\000\024\002\uffdc\015\uffdc" +
    "\021\uffdc\036\uffdc\042\uffdc\054\uffdc\061\uffdc\063\uffdc\064" +
    "\uffdc\001\002\000\022\015\020\021\012\036\030\042\022" +
    "\054\017\060\167\063\027\064\015\001\002\000\024\002" +
    "\uffdb\015\uffdb\021\uffdb\036\uffdb\042\uffdb\054\uffdb\061\uffdb" +
    "\063\uffdb\064\uffdb\001\002\000\004\065\177\001\002\000" +
    "\012\030\055\031\054\032\052\034\051\001\002\000\004" +
    "\004\201\001\002\000\026\002\uffd9\015\uffd9\021\uffd9\036" +
    "\uffd9\042\uffd9\054\uffd9\060\uffd9\061\uffd9\063\uffd9\064\uffd9" +
    "\001\002\000\004\011\041\001\002\000\004\004\204\001" +
    "\002\000\012\015\020\021\012\054\017\060\101\001\002" +
    "\000\024\002\ufff4\015\ufff4\021\ufff4\036\ufff4\042\ufff4\054" +
    "\ufff4\061\ufff4\063\ufff4\064\ufff4\001\002\000\020\045\130" +
    "\046\125\047\131\050\127\051\126\052\124\062\207\001" +
    "\002\000\012\015\020\021\012\054\017\060\101\001\002" +
    "\000\024\002\uffe5\015\uffe5\021\uffe5\036\uffe5\042\uffe5\054" +
    "\uffe5\061\uffe5\063\uffe5\064\uffe5\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\006\004\003\006\004\001\001\000\002\001" +
    "\001\000\004\005\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\011\020\012\015\013" +
    "\023\015\013\017\012\020\025\022\024\023\022\001\001" +
    "\000\014\026\205\027\115\030\111\031\112\033\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\175\001\001\000\014\026" +
    "\162\027\115\030\111\031\112\033\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\037\001\001\000\002\001" +
    "\001\000\006\036\043\041\044\001\001\000\004\036\063" +
    "\001\001\000\004\037\061\001\001\000\002\001\001\000" +
    "\004\044\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\036\043\041\057\001" +
    "\001\000\002\001\001\000\004\036\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\065\001\001\000\004\042\066\001\001\000\002\001\001" +
    "\000\004\003\070\001\001\000\002\001\001\000\004\012" +
    "\072\001\001\000\014\007\077\012\076\015\075\016\074" +
    "\017\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\101\001\001\000\012\012\076\015\075\016\102\017" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\024\157\026\152\027\115\030\111\031" +
    "\112\033\107\001\001\000\014\026\117\027\115\030\111" +
    "\031\112\033\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\026\121\027\115\030\111\031\112" +
    "\033\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\027\115\030\111\031\146\033\107\001\001\000\012" +
    "\027\115\030\111\031\145\033\107\001\001\000\012\027" +
    "\115\030\111\031\144\033\107\001\001\000\012\027\115" +
    "\030\111\031\143\033\107\001\001\000\012\027\115\030" +
    "\111\031\142\033\107\001\001\000\012\027\115\030\111" +
    "\031\131\033\107\001\001\000\002\001\001\000\010\027" +
    "\141\030\111\033\107\001\001\000\010\027\134\030\111" +
    "\033\107\001\001\000\002\001\001\000\006\030\140\033" +
    "\107\001\001\000\006\030\137\033\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\024\151\026" +
    "\152\027\115\030\111\031\112\033\107\001\001\000\002" +
    "\001\001\000\004\025\153\001\001\000\002\001\001\000" +
    "\016\024\155\026\152\027\115\030\111\031\112\033\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\011\165\012\015\013\023\015\013\017\012\020" +
    "\025\022\024\023\022\034\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\167\001\001\000\022\011" +
    "\020\012\015\013\023\015\013\017\012\020\025\022\024" +
    "\023\022\001\001\000\002\001\001\000\004\035\172\001" +
    "\001\000\002\001\001\000\024\011\165\012\015\013\023" +
    "\015\013\017\012\020\025\022\024\023\022\034\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\202\001\001\000\002\001\001\000\014\007\204\012\076" +
    "\015\075\016\074\017\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\207\012\076\015\075\016\074" +
    "\017\073\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    

   



    public HashMap<String,Integer> vars = new HashMap<String,Integer>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= BeginProgram Statement_list 
            {
              List<SentencesNode> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<SentencesNode> sl = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sl;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<SentencesNode> start_val = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BeginProgram ::= PROGRAM ID SEMI 
            {
              List<SentencesNode> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BeginProgram",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BeginProgram ::= 
            {
              List<SentencesNode> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BeginProgram",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Statement_list ::= Statement_list Statement 
            {
              List<SentencesNode> RESULT =null;
		int slistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<SentencesNode> slist = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode st = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  slist.add(st); RESULT = slist; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statement_list ::= 
            {
              List<SentencesNode> RESULT =null;
		 List<SentencesNode> nodeList = new ArrayList<SentencesNode>(); RESULT = nodeList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statement ::= CallFunctionOrAssigment 
            {
              SentencesNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode st = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = st;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Statement ::= SentencesDeclaration 
            {
              SentencesNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode st = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Statement ::= ConstDeclaration 
            {
              SentencesNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode st = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = st;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statement ::= SentencesIf 
            {
              SentencesNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode st = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = st;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statement ::= SentencesWhile 
            {
              SentencesNode RESULT =null;
		int wdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode wd = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = wd;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statement ::= FunctionDeclaration 
            {
              SentencesNode RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode fd = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = fd;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= ProcedureDeclaration 
            {
              SentencesNode RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode pd = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = pd;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ProcedureDeclaration ::= PROCEDURE ID Params SEMI LoopBucle 
            {
              SentencesNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ParamsOfFunction> params = (List<ParamsOfFunction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listOfSentencesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listOfSentencesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<SentencesNode> listOfSentences = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ProcedureDeclaration node = new ProcedureDeclaration(params,id, listOfSentences); RESULT=node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcedureDeclaration",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CallFunctionOrAssigment ::= ID ASSIGMENT expr SEMI 
            {
              SentencesNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new AssignationNode(id,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFunctionOrAssigment",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CallFunctionOrAssigment ::= ID LPAREN ListOfExpressions RPAREN SEMI 
            {
              SentencesNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ExpressionNode> listId = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new  CallFunction(id,listId); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFunctionOrAssigment",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ListOfExpressions ::= expr OptionalExpression 
            {
              List<ExpressionNode> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ExpressionNode> listExp = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listExp.add(exp); RESULT = listExp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOfExpressions",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OptionalExpression ::= COMMA ListOfExpressions 
            {
              List<ExpressionNode> RESULT =null;
		int listExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ExpressionNode> listExp = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = listExp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptionalExpression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OptionalExpression ::= 
            {
              List<ExpressionNode> RESULT =null;
		 List<ExpressionNode> node = new ArrayList<ExpressionNode>(); RESULT = node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptionalExpression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FunctionDeclaration ::= FUNCTION ID Params COLON Type SEMI SentencesDeclaration LoopBucle 
            {
              SentencesNode RESULT =null;
		int nameOfFunctionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameOfFunctionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String nameOfFunction = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listParamsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listParamsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<ParamsOfFunction> listParams = (List<ParamsOfFunction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BaseType Type = (BaseType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opDeclarationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opDeclarationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentencesNode opDeclaration = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ListOfSentencesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ListOfSentencesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<SentencesNode> ListOfSentences = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		FunctionDeclaration node = new FunctionDeclaration(listParams,Type,ListOfSentences,opDeclaration, nameOfFunction); RESULT = node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$0 ::= 
            {
              List<ParamsOfFunction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ParamsOfFunction> list = (List<ParamsOfFunction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RESULT =list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Params ::= LPAREN ListParamFunction NT$0 RPAREN 
            {
              List<ParamsOfFunction> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (List<ParamsOfFunction>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ParamsOfFunction> list = (List<ParamsOfFunction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Params",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ListParamFunction ::= VAR ListId COLON Type OptionalListParams 
            {
              List<ParamsOfFunction> RESULT =null;
		int listIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<String> listId = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BaseType type = (BaseType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listParamsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listParamsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ParamsOfFunction> listParams = (List<ParamsOfFunction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		;ParamsOfFunction params = new ParamsOfFunction(true,listId,type); listParams.add(params); RESULT =listParams;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParamFunction",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ListParamFunction ::= ListId COLON Type OptionalListParams 
            {
              List<ParamsOfFunction> RESULT =null;
		int listIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<String> listId = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BaseType type = (BaseType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listParamsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listParamsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ParamsOfFunction> listParams = (List<ParamsOfFunction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParamsOfFunction params = new ParamsOfFunction(false,listId,type); listParams.add(params); RESULT =listParams;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParamFunction",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ListParamFunction ::= 
            {
              List<ParamsOfFunction> RESULT =null;
		 List<ParamsOfFunction> list = new ArrayList<>(); RESULT= list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParamFunction",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OptionalListParams ::= SEMI ListParamFunction 
            {
              List<ParamsOfFunction> RESULT =null;
		int listParamsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listParamsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ParamsOfFunction> listParams = (List<ParamsOfFunction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =listParams;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptionalListParams",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OptionalListParams ::= 
            {
              List<ParamsOfFunction> RESULT =null;
		 List<ParamsOfFunction> list = new ArrayList<>(); RESULT= list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptionalListParams",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SentencesIf ::= IF expr THEN Block 
            {
              SentencesNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlockNode block = (BlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 IfNode node = new IfNode(exp,block); RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesIf",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SentencesWhile ::= WHILE expr DO LoopBucle 
            {
              SentencesNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int loopbucleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int loopbucleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<SentencesNode> loopbucle = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		WhileNode node = new WhileNode(exp, loopbucle); RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesWhile",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LoopBucle ::= SentencesBucle 
            {
              List<SentencesNode> RESULT =null;
		int sentencesBucleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentencesBucleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode sentencesBucle = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		List<SentencesNode> list = new ArrayList<SentencesNode>(); list.add(sentencesBucle); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LoopBucle",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LoopBucle ::= BEGIN SpecialSentences END SEMI 
            {
              List<SentencesNode> RESULT =null;
		int specialsentencesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int specialsentencesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<SentencesNode> specialsentences = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = specialsentences;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LoopBucle",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SentencesBucle ::= SentencesDeclaration 
            {
              SentencesNode RESULT =null;
		int sentencesdeclarationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentencesdeclarationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode sentencesdeclaration = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sentencesdeclaration;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesBucle",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SentencesBucle ::= SentencesIf 
            {
              SentencesNode RESULT =null;
		int sentencesifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentencesifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode sentencesif = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sentencesif;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesBucle",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SentencesBucle ::= SentencesWhile 
            {
              SentencesNode RESULT =null;
		int sentenceswhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenceswhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode sentenceswhile = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sentenceswhile;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesBucle",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SpecialSentences ::= SpecialSentences SentencesBucle 
            {
              List<SentencesNode> RESULT =null;
		int specialSentencesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int specialSentencesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<SentencesNode> specialSentences = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentenceBucleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenceBucleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode sentenceBucle = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		specialSentences.add(sentenceBucle); RESULT = specialSentences; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SpecialSentences",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SpecialSentences ::= 
            {
              List<SentencesNode> RESULT =null;
		List<SentencesNode>  nodelist = new ArrayList<SentencesNode>(); RESULT = nodelist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SpecialSentences",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Block ::= Statement 
            {
              BlockNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode s = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 BlockNode node = new BlockNode(s); RESULT = node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Block ::= BEGIN Statement_list END SEMI SentencesElse 
            {
              BlockNode RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<SentencesNode> tc = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlockNode fc = (BlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 BlockNode node = new BlockNode(tc,fc); RESULT = node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SentencesElse ::= ELSE Block 
            {
              BlockNode RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlockNode bc = (BlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = bc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesElse",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SentencesElse ::= 
            {
              BlockNode RESULT =null;
		BlockNode node = new  BlockNode(); RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesElse",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SentencesDeclaration ::= VAR ListId COLON Type SEMI 
            {
              SentencesNode RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<String> ls = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BaseType typ = (BaseType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int symbolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int symbolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol symbol = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		DeclarationNode declaration = new DeclarationNode(ls,typ,symbol); RESULT = declaration;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesDeclaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ConstDeclaration ::= CONST ID ASSIGMENT TypeOfConst SEMI 
            {
              SentencesNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode tc = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ConstNode node = new ConstNode(id,tc); RESULT= node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstDeclaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TypeOfConst ::= LIT_CHAR 
            {
              ExpressionNode RESULT =null;
		int ltcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char ltc = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LiteralChar nodo = new LiteralChar(ltc); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOfConst",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TypeOfConst ::= LIT_STRING 
            {
              ExpressionNode RESULT =null;
		int ltsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LiteralString nodo = new LiteralString(lts);RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOfConst",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OptionalList ::= COMMA ListId 
            {
              List<String> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<String> ls = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptionalList",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OptionalList ::= 
            {
              List<String> RESULT =null;
		ArrayList<String> ls = new ArrayList<String>();RESULT= ls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptionalList",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ListId ::= ID OptionalList 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<String> ls = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ls.add(id); RESULT= ls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListId",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ListId ::= 
            {
              List<String> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListId",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr GREATERTHAN sumfactor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThanNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr LESSTHAN sumfactor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThanNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr GREATEROREQUALTHAN sumfactor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreatherOrEqualThanNode (f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr LESSOREQUALTHAN sumfactor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessOrEqualThanNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr EQUALSEQUALS sumfactor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualsNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr NOTEQUALS sumfactor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotEqualsNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= sumfactor 
            {
              ExpressionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sumfactor ::= sumfactor PLUS factor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SumNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumfactor",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sumfactor ::= sumfactor MINUS factor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SubNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumfactor",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sumfactor ::= factor 
            {
              ExpressionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumfactor",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= factor TIMES term 
            {
              ExpressionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultNode(t,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= factor DIVIDE term 
            {
              ExpressionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivNode(t,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= term 
            {
              ExpressionNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term ::= LPAREN expr RPAREN 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= NUMBER 
            {
              ExpressionNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumberNode(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= id 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode i = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term ::= LIT_STRING 
            {
              ExpressionNode RESULT =null;
		int ltsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LiteralString node = new LiteralString(lts); RESULT = node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // term ::= LIT_CHAR 
            {
              ExpressionNode RESULT =null;
		int ltcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char ltc = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LiteralChar node = new LiteralChar(ltc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // id ::= ID 
            {
              ExpressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdNode(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // id ::= ID LPAREN ListOfExpressions RPAREN 
            {
              ExpressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ExpressionNode> listId = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new   CallFunctionExpression(id,listId); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Type ::= CHAR 
            {
              BaseType RESULT =null;
		 CharNode node = new CharNode(); RESULT = node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Type ::= BOOLEAN 
            {
              BaseType RESULT =null;
		 BooleanType node = new BooleanType(); RESULT= node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Type ::= STRING 
            {
              BaseType RESULT =null;
		 StringNode node= new StringNode(); RESULT= node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Type ::= INTEGER 
            {
              BaseType RESULT =null;
		 IntNode node =  new IntNode(); RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
