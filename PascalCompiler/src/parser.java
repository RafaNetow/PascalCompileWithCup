
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.*;
import Semantic.BaseType;
import Tree.Expression.DataType.*;
import Tree.Expression.LiteralNodes.LiteralChar;
import Tree.Expression.LiteralNodes.LiteralString;
import Tree.Expression.LiteralNodes.NumberNode;
import Tree.Sentences.Bucles.ForNode;
import Tree.Sentences.Conditional.IfNode;
import Tree.Sentences.Declaration.ConstNode;
import Tree.Sentences.Declaration.DeclarationNode;
import java_cup.runtime.*;
import java.util.*;
import Tree.Expression.*;
import Tree.BinaryOperator.*;
import Tree.Sentences.Bucles.WhileNode;
import Tree.Sentences.Declaration.AssignationNode;
import Tree.Expression.BaseType.ExpressionNode;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\004\004\000\002\002\004\000\002\006" +
    "\005\000\002\006\002\000\002\005\004\000\002\005\002" +
    "\000\002\007\006\000\002\007\003\000\002\007\003\000" +
    "\002\007\011\000\002\007\015\000\002\007\011\000\002" +
    "\007\015\000\002\010\007\000\002\011\007\000\002\016" +
    "\003\000\002\016\003\000\002\021\004\000\002\021\002" +
    "\000\002\020\004\000\002\020\002\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\003\000\002\015" +
    "\005\000\002\015\005\000\002\015\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\003\000\002\014\005\000" +
    "\002\014\003\000\002\014\003\000\002\017\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\022\002\ufffe\015\ufffe\021\ufffe\036\ufffe\040" +
    "\ufffe\051\ufffe\052\ufffe\053\006\001\002\000\004\002\137" +
    "\001\002\000\020\002\ufffc\015\ufffc\021\ufffc\036\ufffc\040" +
    "\ufffc\051\ufffc\052\ufffc\001\002\000\004\040\007\001\002" +
    "\000\004\004\010\001\002\000\020\002\uffff\015\uffff\021" +
    "\uffff\036\uffff\040\uffff\051\uffff\052\uffff\001\002\000\020" +
    "\002\001\015\017\021\012\036\023\040\020\051\016\052" +
    "\014\001\002\000\004\011\131\001\002\000\004\035\126" +
    "\001\002\000\004\011\114\001\002\000\022\002\ufffa\015" +
    "\ufffa\017\ufffa\021\ufffa\036\ufffa\040\ufffa\051\ufffa\052\ufffa" +
    "\001\002\000\006\040\100\054\uffed\001\002\000\004\011" +
    "\032\001\002\000\040\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\012\uffdc\013\uffdc\026\uffdc\035\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\001\002\000\022" +
    "\002\ufffd\015\ufffd\017\ufffd\021\ufffd\036\ufffd\040\ufffd\051" +
    "\ufffd\052\ufffd\001\002\000\022\002\ufff9\015\ufff9\017\ufff9" +
    "\021\ufff9\036\ufff9\040\ufff9\051\ufff9\052\ufff9\001\002\000" +
    "\004\040\024\001\002\000\004\035\025\001\002\000\006" +
    "\041\030\042\026\001\002\000\004\004\ufff2\001\002\000" +
    "\004\004\031\001\002\000\004\004\ufff1\001\002\000\022" +
    "\002\ufff3\015\ufff3\017\ufff3\021\ufff3\036\ufff3\040\ufff3\051" +
    "\ufff3\052\ufff3\001\002\000\010\011\037\037\036\040\020" +
    "\001\002\000\030\004\uffe6\005\052\006\053\012\uffe6\026" +
    "\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6" +
    "\001\002\000\034\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\012\uffe0\026\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0" +
    "\047\uffe0\050\uffe0\001\002\000\034\004\uffe3\005\uffe3\006" +
    "\uffe3\007\056\010\055\012\uffe3\026\uffe3\043\uffe3\044\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\050\uffe3\001\002\000\034\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\010\uffde\012\uffde\026\uffde" +
    "\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\001" +
    "\002\000\010\011\037\037\036\040\020\001\002\000\020" +
    "\012\042\043\047\044\044\045\050\046\046\047\045\050" +
    "\043\001\002\000\034\004\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\012\uffdd\026\uffdd\043\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\001\002\000\004\016\067\001\002" +
    "\000\010\011\037\037\036\040\020\001\002\000\010\011" +
    "\037\037\036\040\020\001\002\000\010\011\037\037\036" +
    "\040\020\001\002\000\010\011\037\037\036\040\020\001" +
    "\002\000\010\011\037\037\036\040\020\001\002\000\010" +
    "\011\037\037\036\040\020\001\002\000\030\004\uffe9\005" +
    "\052\006\053\012\uffe9\026\uffe9\043\uffe9\044\uffe9\045\uffe9" +
    "\046\uffe9\047\uffe9\050\uffe9\001\002\000\010\011\037\037" +
    "\036\040\020\001\002\000\010\011\037\037\036\040\020" +
    "\001\002\000\034\004\uffe4\005\uffe4\006\uffe4\007\056\010" +
    "\055\012\uffe4\026\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\001\002\000\010\011\037\037\036\040" +
    "\020\001\002\000\010\011\037\037\036\040\020\001\002" +
    "\000\034\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\012" +
    "\uffe2\026\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\050\uffe2\001\002\000\034\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\012\uffe1\026\uffe1\043\uffe1\044\uffe1\045\uffe1" +
    "\046\uffe1\047\uffe1\050\uffe1\001\002\000\034\004\uffe5\005" +
    "\uffe5\006\uffe5\007\056\010\055\012\uffe5\026\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\001\002\000" +
    "\030\004\uffec\005\052\006\053\012\uffec\026\uffec\043\uffec" +
    "\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\001\002\000" +
    "\030\004\uffea\005\052\006\053\012\uffea\026\uffea\043\uffea" +
    "\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\001\002\000" +
    "\030\004\uffe8\005\052\006\053\012\uffe8\026\uffe8\043\uffe8" +
    "\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\001\002\000" +
    "\030\004\uffeb\005\052\006\053\012\uffeb\026\uffeb\043\uffeb" +
    "\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\001\002\000" +
    "\030\004\uffe7\005\052\006\053\012\uffe7\026\uffe7\043\uffe7" +
    "\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\001\002\000" +
    "\020\015\ufffc\017\ufffc\021\ufffc\036\ufffc\040\ufffc\051\ufffc" +
    "\052\ufffc\001\002\000\020\015\017\017\071\021\012\036" +
    "\023\040\020\051\016\052\014\001\002\000\024\002\ufff8" +
    "\015\ufff8\017\ufff8\020\072\021\ufff8\036\ufff8\040\ufff8\051" +
    "\ufff8\052\ufff8\001\002\000\004\016\073\001\002\000\020" +
    "\015\ufffc\017\ufffc\021\ufffc\036\ufffc\040\ufffc\051\ufffc\052" +
    "\ufffc\001\002\000\020\015\017\017\075\021\012\036\023" +
    "\040\020\051\016\052\014\001\002\000\022\002\ufff7\015" +
    "\ufff7\017\ufff7\021\ufff7\036\ufff7\040\ufff7\051\ufff7\052\ufff7" +
    "\001\002\000\020\012\077\043\047\044\044\045\050\046" +
    "\046\047\045\050\043\001\002\000\034\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\012\uffdf\026\uffdf\043\uffdf\044" +
    "\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\001\002\000\006" +
    "\054\uffef\055\111\001\002\000\004\054\102\001\002\000" +
    "\012\030\107\031\106\032\104\034\103\001\002\000\004" +
    "\004\uffd8\001\002\000\004\004\uffd9\001\002\000\004\004" +
    "\110\001\002\000\004\004\uffda\001\002\000\004\004\uffdb" +
    "\001\002\000\022\002\ufff4\015\ufff4\017\ufff4\021\ufff4\036" +
    "\ufff4\040\ufff4\051\ufff4\052\ufff4\001\002\000\006\040\100" +
    "\054\uffed\001\002\000\004\054\uffee\001\002\000\004\054" +
    "\ufff0\001\002\000\004\040\020\001\002\000\004\013\116" +
    "\001\002\000\010\011\037\037\036\040\020\001\002\000" +
    "\020\026\120\043\047\044\044\045\050\046\046\047\045" +
    "\050\043\001\002\000\010\011\037\037\036\040\020\001" +
    "\002\000\020\012\122\043\047\044\044\045\050\046\046" +
    "\047\045\050\043\001\002\000\004\016\123\001\002\000" +
    "\020\015\ufffc\017\ufffc\021\ufffc\036\ufffc\040\ufffc\051\ufffc" +
    "\052\ufffc\001\002\000\020\015\017\017\125\021\012\036" +
    "\023\040\020\051\016\052\014\001\002\000\022\002\ufff5" +
    "\015\ufff5\017\ufff5\021\ufff5\036\ufff5\040\ufff5\051\ufff5\052" +
    "\ufff5\001\002\000\010\011\037\037\036\040\020\001\002" +
    "\000\020\004\130\043\047\044\044\045\050\046\046\047" +
    "\045\050\043\001\002\000\022\002\ufffb\015\ufffb\017\ufffb" +
    "\021\ufffb\036\ufffb\040\ufffb\051\ufffb\052\ufffb\001\002\000" +
    "\010\011\037\037\036\040\020\001\002\000\020\012\133" +
    "\043\047\044\044\045\050\046\046\047\045\050\043\001" +
    "\002\000\004\016\134\001\002\000\020\015\ufffc\017\ufffc" +
    "\021\ufffc\036\ufffc\040\ufffc\051\ufffc\052\ufffc\001\002\000" +
    "\020\015\017\017\136\021\012\036\023\040\020\051\016" +
    "\052\014\001\002\000\022\002\ufff6\015\ufff6\017\ufff6\021" +
    "\ufff6\036\ufff6\040\ufff6\051\ufff6\052\ufff6\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\006\004\003\006\004\001\001\000\002\001" +
    "\001\000\004\005\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\020\010\014\011" +
    "\021\017\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\037\013" +
    "\034\014\033\015\032\017\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\075\013\034\014\033\015\032\017\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\034\014\033\015\065\017\040\001\001\000\012" +
    "\013\034\014\033\015\064\017\040\001\001\000\012\013" +
    "\034\014\033\015\063\017\040\001\001\000\012\013\034" +
    "\014\033\015\062\017\040\001\001\000\012\013\034\014" +
    "\033\015\061\017\040\001\001\000\012\013\034\014\033" +
    "\015\050\017\040\001\001\000\002\001\001\000\010\013" +
    "\060\014\033\017\040\001\001\000\010\013\053\014\033" +
    "\017\040\001\001\000\002\001\001\000\006\014\057\017" +
    "\040\001\001\000\006\014\056\017\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\067\001\001\000\012\007" +
    "\020\010\014\011\021\017\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\073\001\001\000\012\007" +
    "\020\010\014\011\021\017\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\111\001" +
    "\001\000\002\001\001\000\004\003\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\114\001\001\000\002\001\001\000\014\012\116\013\034" +
    "\014\033\015\032\017\040\001\001\000\002\001\001\000" +
    "\014\012\120\013\034\014\033\015\032\017\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\123\001" +
    "\001\000\012\007\020\010\014\011\021\017\012\001\001" +
    "\000\002\001\001\000\014\012\126\013\034\014\033\015" +
    "\032\017\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\131\013\034\014\033\015\032\017\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\134" +
    "\001\001\000\012\007\020\010\014\011\021\017\012\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    

   



    public HashMap<String,Integer> vars = new HashMap<String,Integer>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= BeginProgram statement_list 
            {
              List<SentencesNode> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<SentencesNode> sl = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sl;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<SentencesNode> start_val = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BeginProgram ::= PROGRAM ID SEMI 
            {
              List<SentencesNode> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BeginProgram",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BeginProgram ::= 
            {
              List<SentencesNode> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BeginProgram",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_list ::= statement_list statement 
            {
              List<SentencesNode> RESULT =null;
		int xDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<SentencesNode> xD = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode xP = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  xD.add(xP); RESULT = xD; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement_list ::= 
            {
              List<SentencesNode> RESULT =null;
		 List<SentencesNode> nodeList = new ArrayList<SentencesNode>(); RESULT = nodeList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= id ASSIGMENT expr SEMI 
            {
              SentencesNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignationNode(i, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= SentencesDeclaration 
            {
              SentencesNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode st = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= ConstDeclaration 
            {
              SentencesNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode st = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = st;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= IF LPAREN expr RPAREN LCURLY statement_list RCURLY 
            {
              SentencesNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<SentencesNode> s = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfNode(null,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= IF LPAREN expr RPAREN LCURLY statement_list RCURLY ELSE LCURLY statement_list RCURLY 
            {
              SentencesNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<SentencesNode> s = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<SentencesNode> s2 = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfNode(null,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= WHILE LPAREN expr RPAREN LCURLY statement_list RCURLY 
            {
              SentencesNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<SentencesNode> s = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= FOR LPAREN id EQUALS expr TO expr RPAREN LCURLY statement_list RCURLY 
            {
              SentencesNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<SentencesNode> s = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ForNode(i,e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SentencesDeclaration ::= VAR ListId COLON type SEMI 
            {
              SentencesNode RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<String> ls = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BaseType typ = (BaseType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		DeclarationNode declaration = new DeclarationNode(ls,typ); RESULT = declaration;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesDeclaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDeclaration ::= CONST ID ASSIGMENT TypeOfConst SEMI 
            {
              SentencesNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode tc = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ConstNode node = new ConstNode(id,tc); RESULT= node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstDeclaration",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TypeOfConst ::= LIT_CHAR 
            {
              ExpressionNode RESULT =null;
		int ltcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char ltc = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LiteralChar nodo = new LiteralChar(ltc); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOfConst",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TypeOfConst ::= LIT_STRING 
            {
              ExpressionNode RESULT =null;
		int ltsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LiteralString nodo = new LiteralString(lts);RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOfConst",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OptionalList ::= COMMA ListId 
            {
              List<String> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<String> ls = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptionalList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OptionalList ::= 
            {
              List<String> RESULT =null;
		ArrayList<String> ls = new ArrayList<String>();RESULT= ls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptionalList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListId ::= ID OptionalList 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<String> ls = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ls.add(id); RESULT= ls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListId",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ListId ::= 
            {
              List<String> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListId",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr GREATERTHAN sumfactor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThanNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr LESSTHAN sumfactor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThanNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr GREATEROREQUALTHAN sumfactor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreatherOrEqualThanNode (f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr LESSOREQUALTHAN sumfactor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessOrEqualThanNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr EQUALSEQUALS sumfactor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualsNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr NOTEQUALS sumfactor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotEqualsNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= sumfactor 
            {
              ExpressionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sumfactor ::= sumfactor PLUS factor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SumNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumfactor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sumfactor ::= sumfactor MINUS factor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SubNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumfactor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sumfactor ::= factor 
            {
              ExpressionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumfactor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // factor ::= factor TIMES term 
            {
              ExpressionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultNode(t,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // factor ::= factor DIVIDE term 
            {
              ExpressionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivNode(t,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // factor ::= term 
            {
              ExpressionNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // term ::= LPAREN expr RPAREN 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // term ::= NUMBER 
            {
              ExpressionNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumberNode(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // term ::= id 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // id ::= ID 
            {
              IdNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdNode(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= CHAR 
            {
              BaseType RESULT =null;
		 CharNode node = new CharNode(); RESULT = node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= BOOLEAN 
            {
              BaseType RESULT =null;
		 BooleanNode node = new BooleanNode(); RESULT= node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= STRING 
            {
              BaseType RESULT =null;
		 StringNode node= new StringNode();
                 RESULT= node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type ::= INTEGER 
            {
              BaseType RESULT =null;
		 IntNode node =  new IntNode(); RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
