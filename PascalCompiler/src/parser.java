
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.*;
import Semantic.BaseType;
import Tree.Expression.DataType.*;
import Tree.Expression.LiteralNodes.LiteralChar;
import Tree.Expression.LiteralNodes.LiteralString;
import Tree.Expression.LiteralNodes.NumberNode;
import Tree.Sentences.Bucles.ForNode;
import Tree.Sentences.Bucles.RepeatNode;
import Tree.Sentences.Conditional.BlockNode;
import Tree.Sentences.Conditional.IfNode;
import Tree.Sentences.Declaration.ConstNode;
import Tree.Sentences.Declaration.DeclarationNode;
import Tree.Sentences.Declaration.Function.*;
import java_cup.runtime.*;
import java.util.*;
import Tree.Expression.*;
import Tree.BinaryOperator.*;
import Tree.Sentences.Bucles.WhileNode;
import Tree.Sentences.Declaration.AssignationNode;
import Tree.Expression.BaseType.ExpressionNode;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\004\004\000\002\002\004\000\002\006" +
    "\005\000\002\006\002\000\002\005\004\000\002\005\002" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\013" +
    "\007\000\002\025\007\000\002\024\006\000\002\024\007" +
    "\000\002\027\004\000\002\030\004\000\002\030\002\000" +
    "\002\022\012\000\002\047\002\000\002\043\006\000\002" +
    "\044\007\000\002\044\006\000\002\044\002\000\002\045" +
    "\004\000\002\045\002\000\002\017\006\000\002\021\006" +
    "\000\002\026\012\000\002\007\003\000\002\007\006\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\010\004\000\002\010\002\000\002\037\003" +
    "\000\002\037\007\000\002\040\004\000\002\040\002\000" +
    "\002\014\007\000\002\015\007\000\002\035\003\000\002" +
    "\035\003\000\002\042\004\000\002\042\002\000\002\041" +
    "\004\000\002\041\002\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\003\000\002\034\005\000\002" +
    "\034\005\000\002\034\003\000\002\032\005\000\002\032" +
    "\005\000\002\032\003\000\002\033\005\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\036\003\000\002\036\006\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\030\002\ufffe\015\ufffe\021\ufffe\036\ufffe\042" +
    "\ufffe\054\ufffe\055\ufffe\056\ufffe\057\006\064\ufffe\065\ufffe" +
    "\001\002\000\004\002\234\001\002\000\026\002\ufffc\015" +
    "\ufffc\021\ufffc\036\ufffc\042\ufffc\054\ufffc\055\ufffc\056\ufffc" +
    "\064\ufffc\065\ufffc\001\002\000\004\042\007\001\002\000" +
    "\004\004\010\001\002\000\026\002\uffff\015\uffff\021\uffff" +
    "\036\uffff\042\uffff\054\uffff\055\uffff\056\uffff\064\uffff\065" +
    "\uffff\001\002\000\026\002\001\015\021\021\015\036\024" +
    "\042\022\054\031\055\034\056\027\064\020\065\012\001" +
    "\002\000\004\042\230\001\002\000\032\002\ufff3\015\ufff3" +
    "\021\ufff3\036\ufff3\042\ufff3\054\ufff3\055\ufff3\056\ufff3\062" +
    "\ufff3\064\ufff3\065\ufff3\066\ufff3\001\002\000\032\002\ufffa" +
    "\015\ufffa\021\ufffa\036\ufffa\042\ufffa\054\ufffa\055\ufffa\056" +
    "\ufffa\062\ufffa\064\ufffa\065\ufffa\066\ufffa\001\002\000\014" +
    "\011\101\041\071\042\075\043\077\044\074\001\002\000" +
    "\032\002\ufff5\015\ufff5\021\ufff5\036\ufff5\042\ufff5\054\ufff5" +
    "\055\ufff5\056\ufff5\062\ufff5\064\ufff5\065\ufff5\066\ufff5\001" +
    "\002\000\032\002\ufff7\015\ufff7\021\ufff7\036\ufff7\042\ufff7" +
    "\054\ufff7\055\ufff7\056\ufff7\062\ufff7\064\ufff7\065\ufff7\066" +
    "\ufff7\001\002\000\004\042\177\001\002\000\014\011\101" +
    "\041\071\042\075\043\077\044\074\001\002\000\006\011" +
    "\155\035\156\001\002\000\032\002\ufff8\015\ufff8\021\ufff8" +
    "\036\ufff8\042\ufff8\054\ufff8\055\ufff8\056\ufff8\062\ufff8\064" +
    "\ufff8\065\ufff8\066\ufff8\001\002\000\004\042\147\001\002" +
    "\000\032\002\ufff6\015\ufff6\021\ufff6\036\ufff6\042\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\062\ufff6\064\ufff6\065\ufff6\066\ufff6" +
    "\001\002\000\030\002\ufffd\015\ufffd\021\ufffd\036\ufffd\042" +
    "\ufffd\054\ufffd\055\ufffd\056\ufffd\062\ufffd\064\ufffd\065\ufffd" +
    "\001\002\000\004\042\140\001\002\000\032\002\ufff4\015" +
    "\ufff4\021\ufff4\036\ufff4\042\ufff4\054\ufff4\055\ufff4\056\ufff4" +
    "\062\ufff4\064\ufff4\065\ufff4\066\ufff4\001\002\000\022\015" +
    "\021\021\015\036\024\042\022\054\031\055\034\056\027" +
    "\061\062\001\002\000\032\002\ufffb\015\ufffb\021\ufffb\036" +
    "\ufffb\042\ufffb\054\ufffb\055\ufffb\056\ufffb\062\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\001\002\000\032\002\ufff9\015\ufff9\021" +
    "\ufff9\036\ufff9\042\ufff9\054\ufff9\055\ufff9\056\ufff9\062\ufff9" +
    "\064\ufff9\065\ufff9\066\ufff9\001\002\000\006\042\035\067" +
    "\uffca\001\002\000\006\067\uffcc\070\046\001\002\000\004" +
    "\067\037\001\002\000\012\030\044\031\043\032\041\034" +
    "\040\001\002\000\006\004\uffb2\012\uffb2\001\002\000\006" +
    "\004\uffb3\012\uffb3\001\002\000\004\004\045\001\002\000" +
    "\006\004\uffb4\012\uffb4\001\002\000\006\004\uffb5\012\uffb5" +
    "\001\002\000\034\002\uffd1\015\uffd1\021\uffd1\036\uffd1\042" +
    "\uffd1\054\uffd1\055\uffd1\056\uffd1\061\uffd1\062\uffd1\064\uffd1" +
    "\065\uffd1\066\uffd1\001\002\000\006\042\035\067\uffca\001" +
    "\002\000\004\067\uffcb\001\002\000\004\067\uffcd\001\002" +
    "\000\032\002\uffd9\015\uffd9\021\uffd9\036\uffd9\042\uffd9\054" +
    "\uffd9\055\uffd9\056\uffd9\062\uffd9\064\uffd9\065\uffd9\066\uffd9" +
    "\001\002\000\032\002\uffd8\015\uffd8\021\uffd8\036\uffd8\042" +
    "\uffd8\054\uffd8\055\uffd8\056\uffd8\062\uffd8\064\uffd8\065\uffd8" +
    "\066\uffd8\001\002\000\032\002\uffdc\015\uffdc\021\uffdc\036" +
    "\uffdc\042\uffdc\054\uffdc\055\uffdc\056\uffdc\062\uffdc\064\uffdc" +
    "\065\uffdc\066\uffdc\001\002\000\032\002\uffdd\015\uffdd\021" +
    "\uffdd\036\uffdd\042\uffdd\054\uffdd\055\uffdd\056\uffdd\062\uffdd" +
    "\064\uffdd\065\uffdd\066\uffdd\001\002\000\032\002\uffe0\015" +
    "\uffe0\021\uffe0\036\uffe0\042\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\062\uffe0\064\uffe0\065\uffe0\066\uffe0\001\002\000\032\002" +
    "\uffde\015\uffde\021\uffde\036\uffde\042\uffde\054\uffde\055\uffde" +
    "\056\uffde\062\uffde\064\uffde\065\uffde\066\uffde\001\002\000" +
    "\032\002\uffda\015\uffda\021\uffda\036\uffda\042\uffda\054\uffda" +
    "\055\uffda\056\uffda\062\uffda\064\uffda\065\uffda\066\uffda\001" +
    "\002\000\032\002\uffdb\015\uffdb\021\uffdb\036\uffdb\042\uffdb" +
    "\054\uffdb\055\uffdb\056\uffdb\062\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\001\002\000\004\066\067\001\002\000\022\015\uffd6" +
    "\021\uffd6\036\uffd6\042\uffd6\054\uffd6\055\uffd6\056\uffd6\062" +
    "\uffd6\001\002\000\022\015\021\021\015\036\024\042\022" +
    "\054\031\055\034\056\027\062\065\001\002\000\022\015" +
    "\uffd7\021\uffd7\036\uffd7\042\uffd7\054\uffd7\055\uffd7\056\uffd7" +
    "\062\uffd7\001\002\000\004\004\066\001\002\000\032\002" +
    "\uffdf\015\uffdf\021\uffdf\036\uffdf\042\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\062\uffdf\064\uffdf\065\uffdf\066\uffdf\001\002\000" +
    "\014\011\101\041\071\042\075\043\077\044\074\001\002" +
    "\000\042\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\012" +
    "\uffba\026\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba" +
    "\052\uffba\060\uffba\063\uffba\070\uffba\001\002\000\042\004" +
    "\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\012\uffbb\026\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\060" +
    "\uffbb\063\uffbb\070\uffbb\001\002\000\042\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\012\uffbd\026\uffbd\045\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\060\uffbd\063\uffbd" +
    "\070\uffbd\001\002\000\036\004\uffc3\005\113\006\114\012" +
    "\uffc3\026\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\060\uffc3\063\uffc3\070\uffc3\001\002\000\042\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\012\uffb8\026\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\060" +
    "\uffb8\063\uffb8\070\uffb8\001\002\000\044\004\uffb7\005\uffb7" +
    "\006\uffb7\007\uffb7\010\uffb7\011\131\012\uffb7\026\uffb7\045" +
    "\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\060\uffb7" +
    "\063\uffb7\070\uffb7\001\002\000\042\004\uffc0\005\uffc0\006" +
    "\uffc0\007\117\010\116\012\uffc0\026\uffc0\045\uffc0\046\uffc0" +
    "\047\uffc0\050\uffc0\051\uffc0\052\uffc0\060\uffc0\063\uffc0\070" +
    "\uffc0\001\002\000\042\004\uffb9\005\uffb9\006\uffb9\007\uffb9" +
    "\010\uffb9\012\uffb9\026\uffb9\045\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\060\uffb9\063\uffb9\070\uffb9\001\002" +
    "\000\020\004\130\045\110\046\105\047\111\050\106\051" +
    "\107\052\104\001\002\000\014\011\101\041\071\042\075" +
    "\043\077\044\074\001\002\000\020\012\103\045\110\046" +
    "\105\047\111\050\106\051\107\052\104\001\002\000\042" +
    "\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\012\uffbc\026" +
    "\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc" +
    "\060\uffbc\063\uffbc\070\uffbc\001\002\000\014\011\101\041" +
    "\071\042\075\043\077\044\074\001\002\000\014\011\101" +
    "\041\071\042\075\043\077\044\074\001\002\000\014\011" +
    "\101\041\071\042\075\043\077\044\074\001\002\000\014" +
    "\011\101\041\071\042\075\043\077\044\074\001\002\000" +
    "\014\011\101\041\071\042\075\043\077\044\074\001\002" +
    "\000\014\011\101\041\071\042\075\043\077\044\074\001" +
    "\002\000\036\004\uffc6\005\113\006\114\012\uffc6\026\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\060" +
    "\uffc6\063\uffc6\070\uffc6\001\002\000\014\011\101\041\071" +
    "\042\075\043\077\044\074\001\002\000\014\011\101\041" +
    "\071\042\075\043\077\044\074\001\002\000\042\004\uffc1" +
    "\005\uffc1\006\uffc1\007\117\010\116\012\uffc1\026\uffc1\045" +
    "\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\060\uffc1" +
    "\063\uffc1\070\uffc1\001\002\000\014\011\101\041\071\042" +
    "\075\043\077\044\074\001\002\000\014\011\101\041\071" +
    "\042\075\043\077\044\074\001\002\000\042\004\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\010\uffbf\012\uffbf\026\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\060\uffbf\063" +
    "\uffbf\070\uffbf\001\002\000\042\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\012\uffbe\026\uffbe\045\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\060\uffbe\063\uffbe\070\uffbe" +
    "\001\002\000\042\004\uffc2\005\uffc2\006\uffc2\007\117\010" +
    "\116\012\uffc2\026\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\060\uffc2\063\uffc2\070\uffc2\001\002\000" +
    "\036\004\uffc9\005\113\006\114\012\uffc9\026\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\060\uffc9\063" +
    "\uffc9\070\uffc9\001\002\000\036\004\uffc5\005\113\006\114" +
    "\012\uffc5\026\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\060\uffc5\063\uffc5\070\uffc5\001\002\000\036" +
    "\004\uffc7\005\113\006\114\012\uffc7\026\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\060\uffc7\063\uffc7" +
    "\070\uffc7\001\002\000\036\004\uffc8\005\113\006\114\012" +
    "\uffc8\026\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\060\uffc8\063\uffc8\070\uffc8\001\002\000\036\004" +
    "\uffc4\005\113\006\114\012\uffc4\026\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\060\uffc4\063\uffc4\070" +
    "\uffc4\001\002\000\032\002\ufff2\015\ufff2\021\ufff2\036\ufff2" +
    "\042\ufff2\054\ufff2\055\ufff2\056\ufff2\062\ufff2\064\ufff2\065" +
    "\ufff2\066\ufff2\001\002\000\014\011\101\041\071\042\075" +
    "\043\077\044\074\001\002\000\004\012\137\001\002\000" +
    "\022\012\uffec\045\110\046\105\047\111\050\106\051\107" +
    "\052\104\070\135\001\002\000\004\012\uffee\001\002\000" +
    "\014\011\101\041\071\042\075\043\077\044\074\001\002" +
    "\000\004\012\uffed\001\002\000\042\004\uffb6\005\uffb6\006" +
    "\uffb6\007\uffb6\010\uffb6\012\uffb6\026\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\060\uffb6\063\uffb6\070" +
    "\uffb6\001\002\000\004\035\141\001\002\000\014\011\101" +
    "\041\071\042\075\043\077\044\074\001\002\000\020\026" +
    "\143\045\110\046\105\047\111\050\106\051\107\052\104" +
    "\001\002\000\014\011\101\041\071\042\075\043\077\044" +
    "\074\001\002\000\020\045\110\046\105\047\111\050\106" +
    "\051\107\052\104\063\145\001\002\000\022\015\021\021" +
    "\015\036\024\042\022\054\031\055\034\056\027\061\062" +
    "\001\002\000\032\002\uffe1\015\uffe1\021\uffe1\036\uffe1\042" +
    "\uffe1\054\uffe1\055\uffe1\056\uffe1\062\uffe1\064\uffe1\065\uffe1" +
    "\066\uffe1\001\002\000\004\035\150\001\002\000\006\043" +
    "\153\044\151\001\002\000\004\004\uffcf\001\002\000\004" +
    "\004\154\001\002\000\004\004\uffce\001\002\000\032\002" +
    "\uffd0\015\uffd0\021\uffd0\036\uffd0\042\uffd0\054\uffd0\055\uffd0" +
    "\056\uffd0\062\uffd0\064\uffd0\065\uffd0\066\uffd0\001\002\000" +
    "\014\011\101\041\071\042\075\043\077\044\074\001\002" +
    "\000\014\011\101\041\071\042\075\043\077\044\074\001" +
    "\002\000\020\004\160\045\110\046\105\047\111\050\106" +
    "\051\107\052\104\001\002\000\032\002\ufff0\015\ufff0\021" +
    "\ufff0\036\ufff0\042\ufff0\054\ufff0\055\ufff0\056\ufff0\062\ufff0" +
    "\064\ufff0\065\ufff0\066\ufff0\001\002\000\004\012\162\001" +
    "\002\000\004\004\163\001\002\000\032\002\uffef\015\uffef" +
    "\021\uffef\036\uffef\042\uffef\054\uffef\055\uffef\056\uffef\062" +
    "\uffef\064\uffef\065\uffef\066\uffef\001\002\000\020\045\110" +
    "\046\105\047\111\050\106\051\107\052\104\060\165\001" +
    "\002\000\026\015\021\021\015\036\024\042\022\054\031" +
    "\055\034\056\027\061\166\064\020\065\012\001\002\000" +
    "\026\015\ufffc\021\ufffc\036\ufffc\042\ufffc\054\ufffc\055\ufffc" +
    "\056\ufffc\062\ufffc\064\ufffc\065\ufffc\001\002\000\032\002" +
    "\uffe3\015\uffe3\021\uffe3\036\uffe3\042\uffe3\054\uffe3\055\uffe3" +
    "\056\uffe3\062\uffe3\064\uffe3\065\uffe3\066\uffe3\001\002\000" +
    "\032\002\uffd5\015\uffd5\021\uffd5\036\uffd5\042\uffd5\054\uffd5" +
    "\055\uffd5\056\uffd5\062\uffd5\064\uffd5\065\uffd5\066\uffd5\001" +
    "\002\000\026\015\021\021\015\036\024\042\022\054\031" +
    "\055\034\056\027\062\172\064\020\065\012\001\002\000" +
    "\004\004\173\001\002\000\034\002\uffd2\015\uffd2\020\175" +
    "\021\uffd2\036\uffd2\042\uffd2\054\uffd2\055\uffd2\056\uffd2\062" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\001\002\000\032\002\uffd4" +
    "\015\uffd4\021\uffd4\036\uffd4\042\uffd4\054\uffd4\055\uffd4\056" +
    "\uffd4\062\uffd4\064\uffd4\065\uffd4\066\uffd4\001\002\000\026" +
    "\015\021\021\015\036\024\042\022\054\031\055\034\056" +
    "\027\061\166\064\020\065\012\001\002\000\032\002\uffd3" +
    "\015\uffd3\021\uffd3\036\uffd3\042\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\062\uffd3\064\uffd3\065\uffd3\066\uffd3\001\002\000\004" +
    "\011\201\001\002\000\004\067\220\001\002\000\012\012" +
    "\uffe6\042\035\055\202\067\uffca\001\002\000\006\042\035" +
    "\067\uffca\001\002\000\004\067\207\001\002\000\004\012" +
    "\uffea\001\002\000\004\012\206\001\002\000\006\004\uffe9" +
    "\067\uffe9\001\002\000\012\030\044\031\043\032\041\034" +
    "\040\001\002\000\006\004\212\012\uffe4\001\002\000\004" +
    "\012\uffe7\001\002\000\012\012\uffe6\042\035\055\202\067" +
    "\uffca\001\002\000\004\012\uffe5\001\002\000\004\067\215" +
    "\001\002\000\012\030\044\031\043\032\041\034\040\001" +
    "\002\000\006\004\212\012\uffe4\001\002\000\004\012\uffe8" +
    "\001\002\000\012\030\044\031\043\032\041\034\040\001" +
    "\002\000\004\004\222\001\002\000\004\055\034\001\002" +
    "\000\022\015\021\021\015\036\024\042\022\054\031\055" +
    "\034\056\027\061\062\001\002\000\032\002\uffeb\015\uffeb" +
    "\021\uffeb\036\uffeb\042\uffeb\054\uffeb\055\uffeb\056\uffeb\062" +
    "\uffeb\064\uffeb\065\uffeb\066\uffeb\001\002\000\020\045\110" +
    "\046\105\047\111\050\106\051\107\052\104\063\226\001" +
    "\002\000\022\015\021\021\015\036\024\042\022\054\031" +
    "\055\034\056\027\061\062\001\002\000\032\002\uffe2\015" +
    "\uffe2\021\uffe2\036\uffe2\042\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\062\uffe2\064\uffe2\065\uffe2\066\uffe2\001\002\000\004\011" +
    "\201\001\002\000\004\004\232\001\002\000\022\015\021" +
    "\021\015\036\024\042\022\054\031\055\034\056\027\061" +
    "\062\001\002\000\032\002\ufff1\015\ufff1\021\ufff1\036\ufff1" +
    "\042\ufff1\054\ufff1\055\ufff1\056\ufff1\062\ufff1\064\ufff1\065" +
    "\ufff1\066\ufff1\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\006\004\003\006\004\001\001\000\002\001" +
    "\001\000\004\005\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\012\025\013\027\014" +
    "\013\015\032\017\022\021\016\022\024\024\031\025\015" +
    "\026\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\031\224\032\075\033\071\034\072" +
    "\036\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\031\163\032\075\033\071\034\072" +
    "\036\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\007\060\013\050\014" +
    "\055\015\056\017\053\020\054\021\052\024\057\026\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\035\001\001\000\004\042\046\001\001\000\002\001\001" +
    "\000\004\003\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\062\001\001\000\022\013\050\014" +
    "\055\015\056\017\053\020\063\021\052\024\057\026\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\031\077\032\075\033\071\034\072\036\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\031\101\032\075\033\071\034\072\036\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\032\075\033" +
    "\071\034\126\036\067\001\001\000\012\032\075\033\071" +
    "\034\125\036\067\001\001\000\012\032\075\033\071\034" +
    "\124\036\067\001\001\000\012\032\075\033\071\034\123" +
    "\036\067\001\001\000\012\032\075\033\071\034\122\036" +
    "\067\001\001\000\012\032\075\033\071\034\111\036\067" +
    "\001\001\000\002\001\001\000\010\032\121\033\071\036" +
    "\067\001\001\000\010\032\114\033\071\036\067\001\001" +
    "\000\002\001\001\000\006\033\120\036\067\001\001\000" +
    "\006\033\117\036\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\027\131\031\132\032\075\033" +
    "\071\034\072\036\067\001\001\000\002\001\001\000\004" +
    "\030\133\001\001\000\002\001\001\000\016\027\135\031" +
    "\132\032\075\033\071\034\072\036\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\031" +
    "\141\032\075\033\071\034\072\036\067\001\001\000\002" +
    "\001\001\000\014\031\143\032\075\033\071\034\072\036" +
    "\067\001\001\000\002\001\001\000\024\007\145\013\050" +
    "\014\055\015\056\017\053\020\054\021\052\024\057\026" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\027\160\031\132" +
    "\032\075\033\071\034\072\036\067\001\001\000\014\031" +
    "\156\032\075\033\071\034\072\036\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\012\167" +
    "\013\027\014\013\015\032\017\022\021\016\022\024\024" +
    "\031\025\015\026\012\037\166\001\001\000\004\005\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\012" +
    "\025\013\027\014\013\015\032\017\022\021\016\022\024" +
    "\024\031\025\015\026\012\001\001\000\002\001\001\000" +
    "\004\040\173\001\001\000\002\001\001\000\030\012\167" +
    "\013\027\014\013\015\032\017\022\021\016\022\024\024" +
    "\031\025\015\026\012\037\175\001\001\000\002\001\001" +
    "\000\004\043\177\001\001\000\002\001\001\000\006\041" +
    "\202\044\203\001\001\000\004\041\213\001\001\000\002" +
    "\001\001\000\004\047\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\207\001\001\000\004\045\210" +
    "\001\001\000\002\001\001\000\006\041\202\044\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\215" +
    "\001\001\000\004\045\216\001\001\000\002\001\001\000" +
    "\004\003\220\001\001\000\002\001\001\000\004\014\222" +
    "\001\001\000\024\007\223\013\050\014\055\015\056\017" +
    "\053\020\054\021\052\024\057\026\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\007\226\013\050\014" +
    "\055\015\056\017\053\020\054\021\052\024\057\026\051" +
    "\001\001\000\002\001\001\000\004\043\230\001\001\000" +
    "\002\001\001\000\024\007\232\013\050\014\055\015\056" +
    "\017\053\020\054\021\052\024\057\026\051\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    

   



    public HashMap<String,Integer> vars = new HashMap<String,Integer>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= BeginProgram Statement_list 
            {
              List<SentencesNode> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<SentencesNode> sl = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sl;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<SentencesNode> start_val = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BeginProgram ::= PROGRAM ID SEMI 
            {
              List<SentencesNode> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BeginProgram",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BeginProgram ::= 
            {
              List<SentencesNode> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BeginProgram",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Statement_list ::= Statement_list Statement 
            {
              List<SentencesNode> RESULT =null;
		int slistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<SentencesNode> slist = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode st = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  slist.add(st); RESULT = slist; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statement_list ::= 
            {
              List<SentencesNode> RESULT =null;
		 List<SentencesNode> nodeList = new ArrayList<SentencesNode>(); RESULT = nodeList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statement ::= CallFunctionOrAssigment 
            {
              SentencesNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode st = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = st;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Statement ::= SentencesDeclaration 
            {
              SentencesNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode st = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Statement ::= ConstDeclaration 
            {
              SentencesNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode st = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = st;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statement ::= SentencesIf 
            {
              SentencesNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode st = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = st;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statement ::= SentencesWhile 
            {
              SentencesNode RESULT =null;
		int wdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode wd = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = wd;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statement ::= FunctionDeclaration 
            {
              SentencesNode RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode fd = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = fd;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= ProcedureDeclaration 
            {
              SentencesNode RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode pd = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = pd;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= SentencesRepeat 
            {
              SentencesNode RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode sr = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= SentencesFor 
            {
              SentencesNode RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode sf = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SentencesRepeat ::= REPEAT LoopBucle UNTIL expr SEMI 
            {
              SentencesNode RESULT =null;
		int listSentencesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listSentencesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<SentencesNode> listSentences = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode condition = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RepeatNode node = new RepeatNode(condition,listSentences); RESULT= node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesRepeat",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ProcedureDeclaration ::= PROCEDURE ID Params SEMI LoopBucle 
            {
              SentencesNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ParamsOfFunction> params = (List<ParamsOfFunction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listOfSentencesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listOfSentencesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<SentencesNode> listOfSentences = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ProcedureDeclaration node = new ProcedureDeclaration(params,id, listOfSentences); RESULT=node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcedureDeclaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CallFunctionOrAssigment ::= ID ASSIGMENT expr SEMI 
            {
              SentencesNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new AssignationNode(id,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFunctionOrAssigment",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CallFunctionOrAssigment ::= ID LPAREN ListOfExpressions RPAREN SEMI 
            {
              SentencesNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ExpressionNode> listId = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new  CallFunction(id,listId); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFunctionOrAssigment",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListOfExpressions ::= expr OptionalExpression 
            {
              List<ExpressionNode> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ExpressionNode> listExp = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listExp.add(exp); RESULT = listExp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOfExpressions",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OptionalExpression ::= COMMA ListOfExpressions 
            {
              List<ExpressionNode> RESULT =null;
		int listExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ExpressionNode> listExp = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = listExp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptionalExpression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OptionalExpression ::= 
            {
              List<ExpressionNode> RESULT =null;
		 List<ExpressionNode> node = new ArrayList<ExpressionNode>(); RESULT = node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptionalExpression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FunctionDeclaration ::= FUNCTION ID Params COLON Type SEMI SentencesDeclaration LoopBucle 
            {
              SentencesNode RESULT =null;
		int nameOfFunctionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameOfFunctionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String nameOfFunction = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listParamsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listParamsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<ParamsOfFunction> listParams = (List<ParamsOfFunction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int Typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int Typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BaseType Type = (BaseType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opDeclarationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opDeclarationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentencesNode opDeclaration = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ListOfSentencesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ListOfSentencesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<SentencesNode> ListOfSentences = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		FunctionDeclaration node = new FunctionDeclaration(listParams,Type,ListOfSentences,opDeclaration, nameOfFunction); RESULT = node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$0 ::= 
            {
              List<ParamsOfFunction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ParamsOfFunction> list = (List<ParamsOfFunction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RESULT =list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Params ::= LPAREN ListParamFunction NT$0 RPAREN 
            {
              List<ParamsOfFunction> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (List<ParamsOfFunction>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ParamsOfFunction> list = (List<ParamsOfFunction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Params",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ListParamFunction ::= VAR ListId COLON Type OptionalListParams 
            {
              List<ParamsOfFunction> RESULT =null;
		int listIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<String> listId = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BaseType type = (BaseType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listParamsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listParamsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ParamsOfFunction> listParams = (List<ParamsOfFunction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		;ParamsOfFunction params = new ParamsOfFunction(true,listId,type); listParams.add(params); RESULT =listParams;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParamFunction",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListParamFunction ::= ListId COLON Type OptionalListParams 
            {
              List<ParamsOfFunction> RESULT =null;
		int listIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<String> listId = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BaseType type = (BaseType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listParamsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listParamsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ParamsOfFunction> listParams = (List<ParamsOfFunction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ParamsOfFunction params = new ParamsOfFunction(false,listId,type); listParams.add(params); RESULT =listParams;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParamFunction",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListParamFunction ::= 
            {
              List<ParamsOfFunction> RESULT =null;
		 List<ParamsOfFunction> list = new ArrayList<>(); RESULT= list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListParamFunction",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OptionalListParams ::= SEMI ListParamFunction 
            {
              List<ParamsOfFunction> RESULT =null;
		int listParamsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listParamsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ParamsOfFunction> listParams = (List<ParamsOfFunction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =listParams;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptionalListParams",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OptionalListParams ::= 
            {
              List<ParamsOfFunction> RESULT =null;
		 List<ParamsOfFunction> list = new ArrayList<>(); RESULT= list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptionalListParams",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SentencesIf ::= IF expr THEN Block 
            {
              SentencesNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlockNode block = (BlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 IfNode node = new IfNode(exp,block); RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesIf",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SentencesWhile ::= WHILE expr DO LoopBucle 
            {
              SentencesNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode exp = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int loopbucleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int loopbucleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<SentencesNode> loopbucle = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		WhileNode node = new WhileNode(exp, loopbucle); RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesWhile",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SentencesFor ::= FOR ID ASSIGMENT expr TO expr DO LoopBucle 
            {
              SentencesNode RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpressionNode expresion = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode expression = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bucleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bucleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<SentencesNode> bucle = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ForNode fornode = new ForNode(expresion, expression, bucle); RESULT = fornode;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesFor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LoopBucle ::= SentencesBucle 
            {
              List<SentencesNode> RESULT =null;
		int sentencesBucleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentencesBucleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode sentencesBucle = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		List<SentencesNode> list = new ArrayList<SentencesNode>(); list.add(sentencesBucle); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LoopBucle",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LoopBucle ::= BEGIN SpecialSentences END SEMI 
            {
              List<SentencesNode> RESULT =null;
		int specialsentencesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int specialsentencesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<SentencesNode> specialsentences = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = specialsentences;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LoopBucle",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SentencesBucle ::= SentencesDeclaration 
            {
              SentencesNode RESULT =null;
		int sentencesdeclarationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentencesdeclarationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode sentencesdeclaration = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sentencesdeclaration;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesBucle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SentencesBucle ::= SentencesIf 
            {
              SentencesNode RESULT =null;
		int sentencesifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentencesifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode sentencesif = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sentencesif;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesBucle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SentencesBucle ::= SentencesWhile 
            {
              SentencesNode RESULT =null;
		int sentenceswhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenceswhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode sentenceswhile = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sentenceswhile;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesBucle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SentencesBucle ::= CallFunctionOrAssigment 
            {
              SentencesNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode st = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = st;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesBucle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SentencesBucle ::= ConstDeclaration 
            {
              SentencesNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode st = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = st;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesBucle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SentencesBucle ::= SentencesRepeat 
            {
              SentencesNode RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode sr = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=sr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesBucle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SentencesBucle ::= SentencesFor 
            {
              SentencesNode RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode sf = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesBucle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SpecialSentences ::= SpecialSentences SentencesBucle 
            {
              List<SentencesNode> RESULT =null;
		int specialSentencesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int specialSentencesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<SentencesNode> specialSentences = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentenceBucleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentenceBucleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode sentenceBucle = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		specialSentences.add(sentenceBucle); RESULT = specialSentences; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SpecialSentences",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SpecialSentences ::= 
            {
              List<SentencesNode> RESULT =null;
		List<SentencesNode>  nodelist = new ArrayList<SentencesNode>(); RESULT = nodelist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SpecialSentences",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Block ::= Statement 
            {
              BlockNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesNode s = (SentencesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 BlockNode node = new BlockNode(s); RESULT = node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Block ::= BEGIN Statement_list END SEMI SentencesElse 
            {
              BlockNode RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<SentencesNode> tc = (List<SentencesNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlockNode fc = (BlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 BlockNode node = new BlockNode(tc,fc); RESULT = node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SentencesElse ::= ELSE Block 
            {
              BlockNode RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlockNode bc = (BlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = bc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesElse",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SentencesElse ::= 
            {
              BlockNode RESULT =null;
		BlockNode node = new  BlockNode(); RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesElse",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SentencesDeclaration ::= VAR ListId COLON Type SEMI 
            {
              SentencesNode RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<String> ls = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BaseType typ = (BaseType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int symbolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int symbolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Symbol symbol = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		DeclarationNode declaration = new DeclarationNode(ls,typ,symbol); RESULT = declaration;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentencesDeclaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ConstDeclaration ::= CONST ID ASSIGMENT TypeOfConst SEMI 
            {
              SentencesNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode tc = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ConstNode node = new ConstNode(id,tc); RESULT= node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstDeclaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TypeOfConst ::= LIT_CHAR 
            {
              ExpressionNode RESULT =null;
		int ltcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char ltc = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LiteralChar nodo = new LiteralChar(ltc); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOfConst",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TypeOfConst ::= LIT_STRING 
            {
              ExpressionNode RESULT =null;
		int ltsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LiteralString nodo = new LiteralString(lts);RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOfConst",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OptionalList ::= COMMA ListId 
            {
              List<String> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<String> ls = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptionalList",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OptionalList ::= 
            {
              List<String> RESULT =null;
		ArrayList<String> ls = new ArrayList<String>();RESULT= ls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptionalList",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ListId ::= ID OptionalList 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<String> ls = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ls.add(id); RESULT= ls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListId",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ListId ::= 
            {
              List<String> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListId",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr GREATERTHAN sumfactor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThanNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr LESSTHAN sumfactor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThanNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr GREATEROREQUALTHAN sumfactor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreatherOrEqualThanNode (f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr LESSOREQUALTHAN sumfactor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessOrEqualThanNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr EQUALSEQUALS sumfactor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualsNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr NOTEQUALS sumfactor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotEqualsNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= sumfactor 
            {
              ExpressionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sumfactor ::= sumfactor PLUS factor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SumNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumfactor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sumfactor ::= sumfactor MINUS factor 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SubNode(f,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumfactor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sumfactor ::= factor 
            {
              ExpressionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumfactor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= factor TIMES term 
            {
              ExpressionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultNode(t,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= factor DIVIDE term 
            {
              ExpressionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivNode(t,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= term 
            {
              ExpressionNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term ::= LPAREN expr RPAREN 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // term ::= NUMBER 
            {
              ExpressionNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumberNode(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // term ::= id 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode i = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // term ::= LIT_STRING 
            {
              ExpressionNode RESULT =null;
		int ltsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lts = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LiteralString node = new LiteralString(lts); RESULT = node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // term ::= LIT_CHAR 
            {
              ExpressionNode RESULT =null;
		int ltcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char ltc = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LiteralChar node = new LiteralChar(ltc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // id ::= ID 
            {
              ExpressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdNode(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // id ::= ID LPAREN ListOfExpressions RPAREN 
            {
              ExpressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ExpressionNode> listId = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new   CallFunctionExpression(id,listId); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Type ::= CHAR 
            {
              BaseType RESULT =null;
		 CharNode node = new CharNode(); RESULT = node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Type ::= BOOLEAN 
            {
              BaseType RESULT =null;
		 BooleanType node = new BooleanType(); RESULT= node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Type ::= STRING 
            {
              BaseType RESULT =null;
		 StringNode node= new StringNode(); RESULT= node;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Type ::= INTEGER 
            {
              BaseType RESULT =null;
		 IntNode node =  new IntNode(); RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
