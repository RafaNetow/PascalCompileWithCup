import java.util.*;
import Tree.Expression.DataType.IntNode;
import Tree.Expression.LiteralNodes.LiteralChar;
import Tree.Expression.LiteralNodes.LiteralString;
import Tree.Expression.LiteralNodes.NumberNode;
import Tree.Sentences.Bucles.ForNode;
import Tree.Sentences.Conditional.IfNode;
import Tree.Sentences.Declaration.DeclarationNode;
import java_cup.runtime.*;
import java.util.*;
import Tree.Expression.*;
import Tree.BinaryOperator.*;
import Tree.Sentences.Bucles.WhileNode;
import Tree.Sentences.Declaration.AssignationNode;
import Tree.Expression.BaseType.ExpressionNode;
import java_cup.runtime.XMLElement;
import Tree.Expression.DataType.IdNode;
parser code {:
    

   



    public HashMap<String,Integer> vars = new HashMap<String,Integer>();
:};   
terminal           SEMI, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, EQUALS, PRINT, IF, LCURLY, RCURLY, ELSE, WHILE, LBRACK, RBRACK, OF, SCANF;
terminal            TO,FLOAT,CHAR,BOOLEAN,STRING, ARRAY;
terminal Integer   NUMBER;
terminal String   ID;
terminal GREATERTHAN, LESSTHAN, LESSOREQUALTHAN, GREATEROREQUALTHAN, EQUALSEQUALS, NOTEQUALS;

terminal VAR,INTEGER,FOR;//Reserverd Words

terminal COLON,COMMA;//Special Quotes

non terminal Object declaration_list,type;
non terminal List<SentencesNode>    program, statement_list;
non terminal SentencesNode statement,  SentencesDeclaration ;
non terminal ExpressionNode    expr, factor, term, sumfactor;
non terminal IdNode id;
non terminal List<String> ListId, OptionalList;



    program ::= declaration_list statement_list:sl {:RESULT = sl;  :}
    ;

    declaration_list ::= type ID SEMI declaration_list
    |
    ;

    type ::= INTEGER
            | FLOAT
            | CHAR
            | BOOLEAN
            | STRING

            ;
   statement_list ::= statement_list:xD statement:xP {:  xD.add(xP); RESULT = xD; :}
                 | {: List<SentencesNode> nodeList = new ArrayList<SentencesNode>(); RESULT = nodeList; :}
                  ;
   statement ::= //PRINT expr:e SEMI {:  RESULT = new PrintNode(e); :}
                 // SCANF expr:e SEMI {: RESULT = new ScanNode(e); :}
                  id:i EQUALS expr:e SEMI {: RESULT = new AssignationNode(i, e);:} //Aisgnacion nombre := "rafael"
                  |
                   SentencesDeclaration:st{:RESULT= st; :}

                  |
                 IF LPAREN expr:e RPAREN LCURLY statement_list:s RCURLY {: RESULT = new IfNode(null,null,null); :}

                 |
                 IF LPAREN expr:e RPAREN LCURLY statement_list:s RCURLY ELSE LCURLY statement_list:s2 RCURLY {: RESULT = new IfNode(null,null,null); :}

                 |
                 WHILE LPAREN expr:e RPAREN LCURLY statement_list:s RCURLY {: RESULT = new WhileNode(); :}
                 |
                 FOR LPAREN id:i EQUALS expr:e TO expr:e2 RPAREN LCURLY statement_list:s RCURLY {: RESULT = new ForNode(i,e,null,null); :}
                 ;

SentencesDeclaration ::=   VAR ListId:ls COLON type SEMI {:DeclarationNode declaration = new DeclarationNode(ls,null); RESULT = declaration;:};

   OptionalList ::= COMMA ListId:ls {: RESULT = ls;:}
                 |{:ArrayList<String> ls = new ArrayList<String>();RESULT= ls; :};

    ListId ::= ID:id OptionalList:ls {:ls.add(id); RESULT= ls;:}
                    |;

   expr      ::= expr:e GREATERTHAN sumfactor:f {: RESULT = new GreaterThanNode(f,e); :}
                | expr:e LESSTHAN sumfactor:f {: RESULT = new LessThanNode(f,e); :}
                | expr:e GREATEROREQUALTHAN sumfactor:f {: RESULT = new GreatherOrEqualThanNode (f,e); :}
                | expr:e LESSOREQUALTHAN sumfactor:f {: RESULT = new LessOrEqualThanNode(f,e); :}
                | expr:e EQUALSEQUALS sumfactor:f {: RESULT = new EqualsNode(f,e); :}
                | expr:e NOTEQUALS sumfactor:f {: RESULT = new NotEqualsNode(f,e); :}
                | sumfactor:f {: RESULT = f; :}
                ;

   sumfactor ::= sumfactor:e PLUS factor:f
                 {: RESULT = new SumNode(f,e); :}
                 |sumfactor:e MINUS factor:f
                 {: RESULT = new SubNode(f,e); :}
                 |
                 factor:f
                 {: RESULT = f; :}
                 ;
   factor    ::= factor:f TIMES term:t
                 {: RESULT = new MultNode(t,f); :}
                 |
                 factor:f DIVIDE term:t
                 {: RESULT = new DivNode(t,f); :}
                 |
                 term:t
                 {: RESULT = t; :}
                 ;

   term      ::= LPAREN expr:e RPAREN
                 {: RESULT = e; :}
                 |
                 NUMBER:n
                 {: RESULT = new NumberNode(n); :}
                 |
                 id:i
                 {: RESULT = i; :}
                 ;

   id        ::= ID:id {:RESULT = new IdNode(id);:};



